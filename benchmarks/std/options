
Available options:

    -Z                 allow-features=val -- only allow the listed language features to be enabled in code (space separated)
    -Z              always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)
    -Z                   asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)
    -Z                       ast-json=val -- print the AST as JSON and halt (default: no)
    -Z              ast-json-noexpand=val -- print the pre-expansion AST as JSON and halt (default: no)
    -Z             binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)
    -Z                       borrowck=val -- select which borrowck is used (`mir` or `migrate`) (default: `migrate`)
    -Z                 borrowck-stats=val -- gather borrowck statistics (default: no)
    -Z      cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use
    -Z                          chalk=val -- enable the experimental Chalk-based trait solving engine
    -Z                codegen-backend=val -- the backend to use
    -Z                    combine-cgu=val -- combine CGUs into a single one
    -Z                     crate-attr=val -- inject the given attribute in the crate
    -Z                   debug-macros=val -- emit line numbers debug info inside macros (default: no)
    -Z        deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)
    -Z         dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)
    -Z                      dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)
    -Z        dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)
    -Z               dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)
    -Z                 dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)
    -Z                       dump-mir=val -- dump MIR state to file.
        `val` is used to select which passes and functions to dump. For example:
        `all` matches all passes and functions,
        `foo` matches all passes for functions whose name contains 'foo',
        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',
        `foo | bar` all passes for function names containing 'foo' or 'bar'.
    -Z              dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)
    -Z                   dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)
    -Z   dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)
    -Z              dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)
    -Z              dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.
    -Z    emit-future-incompat-report=val -- emits a future-incompatibility report for lints (RFC 2834)
    -Z               emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)
    -Z                    fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)
    -Z          force-overflow-checks=val -- force overflow checks on or off
    -Z     force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)
    -Z                           fuel=val -- set the optimization fuel quota for a crate
    -Z              function-sections=val -- whether each function should go in its own section
    -Z             graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)
    -Z                  graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)
    -Z                      hir-stats=val -- print some statistics about AST and HIR (default: no)
    -Z       human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)
    -Z               identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)
    -Z       incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)
    -Z               incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)
    -Z         incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)
    -Z           inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)
    -Z      inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)
    -Z             inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs
    -Z                    input-stats=val -- gather statistics about the input (default: no)
    -Z              insert-sideeffect=val -- fix undefined behavior when a thread doesn't eventually make progress (such as entering an empty infinite loop) by inserting llvm.sideeffect (default: no)
    -Z            instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`, and is mutually exclusive with `-C profile-generate`/`-C profile-use`); implies `-C link-dead-code` (unless targeting MSVC, or explicitly disabled) and `-Z symbol-mangling-version=v0`; disables/overrides some Rust optimizations (default: no)
    -Z              instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)
    -Z              keep-hygiene-data=val -- keep hygiene data after analysis (default: no)
    -Z          link-native-libraries=val -- link native libraries in the linker invocation (default: yes)
    -Z                      link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)
    -Z                llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)
    -Z                             ls=val -- list the symbols defined by a library crate (default: no)
    -Z                macro-backtrace=val -- show macro backtraces (default: no)
    -Z                merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name
    -Z                     meta-stats=val -- gather metadata statistics (default: no)
    -Z                 mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)
    -Z                  mir-opt-level=val -- MIR optimization level (0-3; default: 1)
    -Z                mutable-noalias=val -- emit noalias metadata for mutable references (default: no)
    -Z          new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)
    -Z                      nll-facts=val -- dump facts from NLL analysis into side files (default: no)
    -Z                  nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)
    -Z                    no-analysis=val -- parse and expand the source, but run no analysis
    -Z                     no-codegen=val -- run all passes except codegen; no output
    -Z     no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups
    -Z            no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints
    -Z                  no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests
    -Z                        no-link=val -- compile without linking
    -Z               no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)
    -Z            no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate
    -Z         osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)
    -Z              panic-abort-tests=val -- support compiling tests with panic=abort (default: no)
    -Z                     parse-only=val -- parse only; do not compile, assemble, or link (default: no)
    -Z                     perf-stats=val -- print some performance-related statistics (default: no)
    -Z                            plt=val -- whether to use the PLT when calling into shared libraries;
        only has effect for PIC code on systems with ELF binaries
        (default: PLT is disabled if full relro is enabled)
    -Z                       polonius=val -- enable polonius-based borrow-checker (default: no)
    -Z                   polymorphize=val -- perform polymorphization analysis
    -Z                   pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)
    -Z                  pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)
    -Z  precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.
    -Z                     print-fuel=val -- make rustc print the total optimization fuel used by a crate
    -Z                print-link-args=val -- print the arguments passed to the linker (default: no)
    -Z              print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)
    -Z               print-mono-items=val -- print the result of the monomorphization collection pass
    -Z               print-type-sizes=val -- print layout information for each type encountered (default: no)
    -Z           proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)
    -Z                        profile=val -- insert profiling code (default: no)
    -Z                   profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)
    -Z                query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)
    -Z                    query-stats=val -- print some statistics about the query system (default: no)
    -Z          relax-elf-relocations=val -- whether ELF relocations can be relaxed
    -Z                    relro-level=val -- choose which RELRO level to use
    -Z            report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)
    -Z                   run-dsymutil=val -- if on Mac, run `dsymutil` and delete intermediate object files (default: yes)
    -Z                      sanitizer=val -- use a sanitizer
    -Z sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer
    -Z              sanitizer-recover=val -- enable recovery for selected sanitizers
    -Z         saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)
    -Z                  save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)
    -Z                   self-profile=val -- run the self profiler and output the raw event data
    -Z            self-profile-events=val -- specify the events recorded by the self profiler;
        for example: `-Z self-profile-events=default,query-keys`
        all options: none, all, default, generic-activity, query-provider, query-cache-hit
                     query-blocked, incr-cache-load, query-keys, function-args, args, llvm
    -Z                 share-generics=val -- make the current crate share its generic instantiations
    -Z                      show-span=val -- show spans for compiler debugging (expr|pat|ty)
    -Z                     span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`
    -Z              span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)
    -Z             src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)
    -Z                          strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)
    -Z        symbol-mangling-version=val -- which mangling version to use for symbol names
    -Z                          teach=val -- show extended diagnostic help (default: no)
    -Z                 terminal-width=val -- set the current terminal width
    -Z                       tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)
    -Z                        thinlto=val -- enable ThinLTO when possible
    -Z                        threads=val -- use a thread pool with N threads
    -Z                           time=val -- measure time of rustc processes (default: no)
    -Z               time-llvm-passes=val -- measure time of each LLVM pass (default: no)
    -Z                    time-passes=val -- measure time of each rustc pass (default: no)
    -Z                      tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)
    -Z                   trace-macros=val -- for every macro invocation, print its name and arguments (default: no)
    -Z               treat-err-as-bug=val -- treat error number `val` that occurs as bug
    -Z          trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items
    -Z                     ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)
    -Z unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)
    -Z                       unpretty=val -- present the input source, unstable (and less-pretty) variants;
        valid types are any of the types for `--pretty`, as well as:
        `expanded`, `expanded,identified`,
        `expanded,hygiene` (with internal representations),
        `everybody_loops` (all function bodies replaced with `loop {}`),
        `hir` (the HIR), `hir,identified`,
        `hir,typed` (HIR with types for each node),
        `hir-tree` (dump the raw HIR),
        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)
    -Z               unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)
    -Z               unstable-options=val -- adds unstable command line options to rustc interface (default: no)
    -Z              use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array
    -Z                   validate-mir=val -- validate MIR after each transformation
    -Z                        verbose=val -- in general, enable more debug printouts (default: no)
    -Z                 verify-llvm-ir=val -- verify LLVM IR (default: no)
