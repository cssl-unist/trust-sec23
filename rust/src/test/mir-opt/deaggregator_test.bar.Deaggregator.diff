- // MIR for `bar` before Deaggregator
+ // MIR for `bar` after Deaggregator
  
  fn bar(_1: usize) -> Baz {
      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:8:8: 8:9
      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:8:21: 8:24
      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15
          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:9:14: 9:15
-         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35
+         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35
+         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35
                                           // mir::Constant
                                           // + span: $DIR/deaggregator_test.rs:9:20: 9:23
                                           // + literal: Const { ty: f32, val: Value(Scalar(0x00000000)) }
+         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:9:5: 9:35
          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:9:34: 9:35
          return;                          // scope 0 at $DIR/deaggregator_test.rs:10:2: 10:2
      }
  }
  
