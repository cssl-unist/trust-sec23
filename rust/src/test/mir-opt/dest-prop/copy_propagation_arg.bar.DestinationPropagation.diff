- // MIR for `bar` before DestinationPropagation
+ // MIR for `bar` after DestinationPropagation
  
  fn bar(_1: u8) -> () {
      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13
      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:15:19: 15:19
      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13
      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13
          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12
          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12
          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13
                                           // mir::Constant
                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10
                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13
          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14
          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10
          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2
          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2
      }
  }
  
