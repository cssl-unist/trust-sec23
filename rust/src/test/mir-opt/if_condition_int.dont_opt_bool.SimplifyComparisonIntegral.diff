- // MIR for `dont_opt_bool` before SimplifyComparisonIntegral
+ // MIR for `dont_opt_bool` after SimplifyComparisonIntegral
  
  fn dont_opt_bool(_1: bool) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:16:18: 16:19
      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:16:30: 16:33
      let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:17:8: 17:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9
          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9
          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26
      }
  
      bb1: {
          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:17:23: 17:24
          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26
      }
  
      bb2: {
          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13
          goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26
      }
  
      bb3: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:18:1: 18:2
          return;                          // scope 0 at $DIR/if-condition-int.rs:18:2: 18:2
      }
  }
  
