- // MIR for `exhaustive_match_i8` before MatchBranchSimplification
+ // MIR for `exhaustive_match_i8` after MatchBranchSimplification
  
  fn exhaustive_match_i8(_1: E) -> i8 {
      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:19:28: 19:29
      let mut _0: i8;                      // return place in scope 0 at $DIR/matches_u8.rs:19:37: 19:39
      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:21:9: 21:13
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:21:9: 21:13
          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:21:9: 21:13
      }
  
      bb1: {
          _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18
          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6
      }
  
      bb2: {
          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18
          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6
      }
  
      bb3: {
          return;                          // scope 0 at $DIR/matches_u8.rs:24:2: 24:2
      }
  }
  
