error: the type `&T` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:41:32
   |
LL |         let _val: &'static T = mem::zeroed();
   |                                ^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: the lint level is defined here
  --> $DIR/uninitialized-zeroed.rs:7:9
   |
LL | #![deny(invalid_value)]
   |         ^^^^^^^^^^^^^
   = note: references must be non-null

error: the type `&T` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:42:32
   |
LL |         let _val: &'static T = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `Wrap<&T>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:44:38
   |
LL |         let _val: Wrap<&'static T> = mem::zeroed();
   |                                      ^^^^^^^^^^^^^
   |                                      |
   |                                      this code causes undefined behavior when executed
   |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `Wrap<&T>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:45:38
   |
LL |         let _val: Wrap<&'static T> = mem::uninitialized();
   |                                      ^^^^^^^^^^^^^^^^^^^^
   |                                      |
   |                                      this code causes undefined behavior when executed
   |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `!` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:52:23
   |
LL |         let _val: ! = mem::zeroed();
   |                       ^^^^^^^^^^^^^
   |                       |
   |                       this code causes undefined behavior when executed
   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `!` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:53:23
   |
LL |         let _val: ! = mem::uninitialized();
   |                       ^^^^^^^^^^^^^^^^^^^^
   |                       |
   |                       this code causes undefined behavior when executed
   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `(i32, !)` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:55:30
   |
LL |         let _val: (i32, !) = mem::zeroed();
   |                              ^^^^^^^^^^^^^
   |                              |
   |                              this code causes undefined behavior when executed
   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `(i32, !)` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:56:30
   |
LL |         let _val: (i32, !) = mem::uninitialized();
   |                              ^^^^^^^^^^^^^^^^^^^^
   |                              |
   |                              this code causes undefined behavior when executed
   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `Void` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:58:26
   |
LL |         let _val: Void = mem::zeroed();
   |                          ^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: enums with no variants have no valid value

error: the type `Void` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:59:26
   |
LL |         let _val: Void = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: enums with no variants have no valid value

error: the type `&i32` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:61:34
   |
LL |         let _val: &'static i32 = mem::zeroed();
   |                                  ^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `&i32` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:62:34
   |
LL |         let _val: &'static i32 = mem::uninitialized();
   |                                  ^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `Ref` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:64:25
   |
LL |         let _val: Ref = mem::zeroed();
   |                         ^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:15:12
   |
LL | struct Ref(&'static i32);
   |            ^^^^^^^^^^^^

error: the type `Ref` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:65:25
   |
LL |         let _val: Ref = mem::uninitialized();
   |                         ^^^^^^^^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:15:12
   |
LL | struct Ref(&'static i32);
   |            ^^^^^^^^^^^^

error: the type `fn()` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:67:26
   |
LL |         let _val: fn() = mem::zeroed();
   |                          ^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `fn()` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:68:26
   |
LL |         let _val: fn() = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `Wrap<fn()>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:70:32
   |
LL |         let _val: Wrap<fn()> = mem::zeroed();
   |                                ^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: function pointers must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `Wrap<fn()>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:71:32
   |
LL |         let _val: Wrap<fn()> = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: function pointers must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `WrapEnum<fn()>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:73:36
   |
LL |         let _val: WrapEnum<fn()> = mem::zeroed();
   |                                    ^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: function pointers must be non-null (in this enum field)
  --> $DIR/uninitialized-zeroed.rs:19:28
   |
LL | enum WrapEnum<T> { Wrapped(T) }
   |                            ^

error: the type `WrapEnum<fn()>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:74:36
   |
LL |         let _val: WrapEnum<fn()> = mem::uninitialized();
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: function pointers must be non-null (in this enum field)
  --> $DIR/uninitialized-zeroed.rs:19:28
   |
LL | enum WrapEnum<T> { Wrapped(T) }
   |                            ^

error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:76:42
   |
LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();
   |                                          ^^^^^^^^^^^^^
   |                                          |
   |                                          this code causes undefined behavior when executed
   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:16:16
   |
LL | struct RefPair((&'static i32, i32));
   |                ^^^^^^^^^^^^^^^^^^^

error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:77:42
   |
LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();
   |                                          ^^^^^^^^^^^^^^^^^^^^
   |                                          |
   |                                          this code causes undefined behavior when executed
   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: references must be non-null (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:16:16
   |
LL | struct RefPair((&'static i32, i32));
   |                ^^^^^^^^^^^^^^^^^^^

error: the type `NonNull<i32>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:79:34
   |
LL |         let _val: NonNull<i32> = mem::zeroed();
   |                                  ^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `NonNull<i32>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:80:34
   |
LL |         let _val: NonNull<i32> = mem::uninitialized();
   |                                  ^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `*const dyn Send` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:82:37
   |
LL |         let _val: *const dyn Send = mem::zeroed();
   |                                     ^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the vtable of a wide raw pointer must be non-null

error: the type `*const dyn Send` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:83:37
   |
LL |         let _val: *const dyn Send = mem::uninitialized();
   |                                     ^^^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the vtable of a wide raw pointer must be non-null

error: the type `bool` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:87:26
   |
LL |         let _val: bool = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: booleans must be either `true` or `false`

error: the type `Wrap<char>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:90:32
   |
LL |         let _val: Wrap<char> = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: characters must be a valid Unicode codepoint (in this struct field)
  --> $DIR/uninitialized-zeroed.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `NonBig` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:93:28
   |
LL |         let _val: NonBig = mem::uninitialized();
   |                            ^^^^^^^^^^^^^^^^^^^^
   |                            |
   |                            this code causes undefined behavior when executed
   |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `NonBig` must be initialized inside its custom valid range

error: the type `Fruit` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:96:27
   |
LL |         let _val: Fruit = mem::uninitialized();
   |                           ^^^^^^^^^^^^^^^^^^^^
   |                           |
   |                           this code causes undefined behavior when executed
   |                           help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: enums have to be initialized to a variant
  --> $DIR/uninitialized-zeroed.rs:27:1
   |
LL | / enum Fruit {
LL | |     Apple,
LL | |     Banana,
LL | | }
   | |_^

error: the type `&i32` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:99:34
   |
LL |         let _val: &'static i32 = mem::transmute(0usize);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `&[i32]` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:100:36
   |
LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `NonZeroU32` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:101:32
   |
LL |         let _val: NonZeroU32 = mem::transmute(0);
   |                                ^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::NonZeroU32` must be non-null

error: the type `NonNull<i32>` does not permit zero-initialization
  --> $DIR/uninitialized-zeroed.rs:104:34
   |
LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `NonNull<i32>` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:105:34
   |
LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `bool` does not permit being left uninitialized
  --> $DIR/uninitialized-zeroed.rs:106:26
   |
LL |         let _val: bool = MaybeUninit::uninit().assume_init();
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: booleans must be either `true` or `false`

error: aborting due to 36 previous errors

