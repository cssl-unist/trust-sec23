error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
  --> $DIR/not-panic-safe-4.rs:9:5
   |
LL | fn assert<T: UnwindSafe + ?Sized>() {}
   |              ---------- required by this bound in `assert`
...
LL |     assert::<&RefCell<i32>>();
   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   |
   = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`
   = note: required because it appears within the type `RefCell<i32>`
   = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`

error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
  --> $DIR/not-panic-safe-4.rs:9:5
   |
LL | fn assert<T: UnwindSafe + ?Sized>() {}
   |              ---------- required by this bound in `assert`
...
LL |     assert::<&RefCell<i32>>();
   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   |
   = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`
   = note: required because it appears within the type `Cell<isize>`
   = note: required because it appears within the type `RefCell<i32>`
   = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0277`.
