error[E0004]: non-exhaustive patterns: `A` not covered
  --> $DIR/non-exhaustive-match.rs:7:11
   |
LL | enum T { A, B }
   | ---------------
   | |        |
   | |        not covered
   | `T` defined here
...
LL |     match x { T::B => { } }
   |           ^ pattern `A` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `T`

error[E0004]: non-exhaustive patterns: `false` not covered
  --> $DIR/non-exhaustive-match.rs:8:11
   |
LL |     match true {
   |           ^^^^ pattern `false` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `bool`

error[E0004]: non-exhaustive patterns: `Some(_)` not covered
  --> $DIR/non-exhaustive-match.rs:11:11
   |
LL |     match Some(10) {
   |           ^^^^^^^^ pattern `Some(_)` not covered
   | 
  ::: $SRC_DIR/core/src/option.rs:LL:COL
   |
LL |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
   |     ---- not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `Option<i32>`

error[E0004]: non-exhaustive patterns: `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered
  --> $DIR/non-exhaustive-match.rs:14:11
   |
LL |     match (2, 3, 4) {
   |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `(i32, i32, i32)`

error[E0004]: non-exhaustive patterns: `(A, A)` not covered
  --> $DIR/non-exhaustive-match.rs:18:11
   |
LL |     match (T::A, T::A) {
   |           ^^^^^^^^^^^^ pattern `(A, A)` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `(T, T)`

error[E0004]: non-exhaustive patterns: `B` not covered
  --> $DIR/non-exhaustive-match.rs:22:11
   |
LL | enum T { A, B }
   | ---------------
   | |           |
   | |           not covered
   | `T` defined here
...
LL |     match T::A {
   |           ^^^^ pattern `B` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `T`

error[E0004]: non-exhaustive patterns: `[]` not covered
  --> $DIR/non-exhaustive-match.rs:33:11
   |
LL |     match *vec {
   |           ^^^^ pattern `[]` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `[Option<isize>]`

error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered
  --> $DIR/non-exhaustive-match.rs:46:11
   |
LL |     match *vec {
   |           ^^^^ pattern `[_, _, _, _, ..]` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `[f32]`

error: aborting due to 8 previous errors

For more information about this error, try `rustc --explain E0004`.
