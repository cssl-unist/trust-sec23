error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/unsized-struct.rs:6:36
   |
LL | struct Foo<T> { data: T }
   |            - required by this bound in `Foo`
LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.
LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }
   |         -                          ^^^^^^ doesn't have a size known at compile-time
   |         |
   |         this type parameter needs to be `Sized`
   |
help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`
  --> $DIR/unsized-struct.rs:4:12
   |
LL | struct Foo<T> { data: T }
   |            ^          - ...if indirection was used here: `Box<T>`
   |            |
   |            this could be changed to `T: ?Sized`...

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/unsized-struct.rs:13:24
   |
LL | fn is_sized<T:Sized>() { }
   |             - required by this bound in `is_sized`
...
LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }
   |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |         |
   |         this type parameter needs to be `Sized`
   |
   = note: required because it appears within the type `Bar<T>`

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0277`.
