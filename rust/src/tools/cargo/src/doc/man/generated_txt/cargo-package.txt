CARGO-PACKAGE(1)

NAME
       cargo-package - Assemble the local package into a distributable tarball

SYNOPSIS
       cargo package [options]

DESCRIPTION
       This command will create a distributable, compressed .crate file with
       the source code of the package in the current directory. The resulting
       file will be stored in the target/package directory. This performs the
       following steps:

       1. Load and check the current workspace, performing some basic checks.
          o  Path dependencies are not allowed unless they have a version key.
             Cargo will ignore the path key for dependencies in published
             packages. dev-dependencies do not have this restriction.

       2. Create the compressed .crate file.
          o  The original Cargo.toml file is rewritten and normalized.

          o  [patch], [replace], and [workspace] sections are removed from the
             manifest.

          o  Cargo.lock is automatically included if the package contains an
             executable binary or example target. cargo-install(1) will use the
             packaged lock file if the --locked flag is used.

          o  A .cargo_vcs_info.json file is included that contains information
             about the current VCS checkout hash if available (not included
             with --allow-dirty).

       3. Extract the .crate file and build it to verify it can build.
          o  This will rebuild your package from scratch to ensure that it can
             be built from a pristine state. The --no-verify flag can be used
             to skip this step.

       4. Check that build scripts did not modify any source files.

       The list of files included can be controlled with the include and
       exclude fields in the manifest.

       See the reference
       <https://doc.rust-lang.org/cargo/reference/publishing.html> for more
       details about packaging and publishing.

OPTIONS
   Package Options
       -l, --list
           Print files included in a package without making one.

       --no-verify
           Don't verify the contents by building them.

       --no-metadata
           Ignore warnings about a lack of human-usable metadata (such as the
           description or the license).

       --allow-dirty
           Allow working directories with uncommitted VCS changes to be
           packaged.

   Compilation Options
       --target triple
           Package for the given architecture. The default is the host
           architecture. The general format of the triple is
           <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for
           a list of supported targets.

           This may also be specified with the build.target config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

           Note that specifying this flag makes Cargo run in a different mode
           where the target artifacts are placed in a separate directory. See
           the build cache
           <https://doc.rust-lang.org/cargo/guide/build-cache.html>
           documentation for more details.

       --target-dir directory
           Directory for all generated artifacts and intermediate files. May
           also be specified with the CARGO_TARGET_DIR environment variable, or
           the build.target-dir config value
           <https://doc.rust-lang.org/cargo/reference/config.html>. Defaults to
           target in the root of the workspace.

   Feature Selection
       The feature flags allow you to control the enabled features for the
       "current" package. The "current" package is the package in the current
       directory, or the one specified in --manifest-path. If running in the
       root of a virtual workspace, then the default features are selected for
       all workspace members, or all features if --all-features is specified.

       When no feature options are given, the default feature is activated for
       every selected package.

       --features features
           Space or comma separated list of features to activate. These
           features only apply to the current directory's package. Features of
           direct dependencies may be enabled with <dep-name>/<feature-name>
           syntax. This flag may be specified multiple times, which enables all
           specified features.

       --all-features
           Activate all available features of all selected packages.

       --no-default-features
           Do not activate the default feature of the current directory's
           package.

   Manifest Options
       --manifest-path path
           Path to the Cargo.toml file. By default, Cargo searches for the
           Cargo.toml file in the current directory or any parent directory.

       --frozen, --locked
           Either of these flags requires that the Cargo.lock file is
           up-to-date. If the lock file is missing, or it needs to be updated,
           Cargo will exit with an error. The --frozen flag also prevents Cargo
           from attempting to access the network to determine if it is
           out-of-date.

           These may be used in environments where you want to assert that the
           Cargo.lock file is up-to-date (such as a CI build) or want to avoid
           network access.

       --offline
           Prevents Cargo from accessing the network for any reason. Without
           this flag, Cargo will stop with an error if it needs to access the
           network and the network is not available. With this flag, Cargo will
           attempt to proceed without the network if possible.

           Beware that this may result in different dependency resolution than
           online mode. Cargo will restrict itself to crates that are
           downloaded locally, even if there might be a newer version as
           indicated in the local copy of the index. See the cargo-fetch(1)
           command to download dependencies before going offline.

           May also be specified with the net.offline config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

   Miscellaneous Options
       -j N, --jobs N
           Number of parallel jobs to run. May also be specified with the
           build.jobs config value
           <https://doc.rust-lang.org/cargo/reference/config.html>. Defaults to
           the number of CPUs.

   Display Options
       -v, --verbose
           Use verbose output. May be specified twice for "very verbose" output
           which includes extra output such as dependency warnings and build
           script output. May also be specified with the term.verbose config
           value <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           No output printed to stdout.

       --color when
           Control when colored output is used. Valid values:

           o  auto (default): Automatically detect if color support is
              available on the terminal.

           o  always: Always display colors.

           o  never: Never display colors.

           May also be specified with the term.color config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

ENVIRONMENT
       See the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>
       for details on environment variables that Cargo reads.

EXIT STATUS
       o  0: Cargo succeeded.

       o  101: Cargo failed to complete.

EXAMPLES
       1. Create a compressed .crate file of the current package:

              cargo package

SEE ALSO
       cargo(1), cargo-publish(1)

